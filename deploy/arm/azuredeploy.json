{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.17.1.54307",
      "templateHash": "5692427675602515188"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "eastus",
      "allowedValues": [
        "southcentralus",
        "eastus",
        "westeurope"
      ],
      "metadata": {
        "description": "Location where all resources will be deployed. This value defaults to the **East US** region."
      }
    },
    "name": {
      "type": "string",
      "defaultValue": "[concat('f',uniqueString(resourceGroup().id))]",
      "maxLength": 15,
      "metadata": {
        "description": "Unique name for the deployed services below. Max length 15 characters, alphanumeric only:\r\n- Azure Cosmos DB for NoSQL\r\n- Azure Cosmos DB for MongoDB vCore\r\n- Azure OpenAI\r\n- Azure App Service\r\n- Azure Functions\r\n\r\nThe name defaults to a unique string generated from the resource group identifier.\r\n"
      }
    },
    "k8sVersion": {
      "type": "string",
      "defaultValue": "1.26.3",
      "metadata": {
        "description": "Specifies the version of Kubernetes to use for the Azure Kubernetes Service (AKS) cluster. Defaults to **1.26.3**"
      }
    }
  },
  "variables": {
    "appConfigSettings": {
      "name": "[format('{0}-appconfig', parameters('name'))]",
      "configKeys": [
        {
          "key": "FoundationaLLM:APIs:AgentFactoryAPI:APIKey",
          "value": "{\"uri\": \"https://solliance-aicopilot.vault.azure.net/secrets/foundationallm-agent-factory-api-key/6f6c885e1c264efdab44eed553781b85\"}",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:APIs:AgentFactoryAPI:APIUrl",
          "value": "https://localhost:7324",
          "contentType": null
        }
      ]
    },
    "cosmosDbSettings": {
      "name": "[format('{0}-cosmos-nosql', parameters('name'))]",
      "databaseName": "database"
    },
    "cognitiveSearchSettings": {
      "name": "[format('{0}-cog-search', parameters('name'))]",
      "sku": "basic"
    },
    "cosmosContainers": {
      "embeddingContainer": {
        "name": "embedding",
        "partitionKeyPath": "/id",
        "maxThroughput": 1000
      },
      "completionsContainer": {
        "name": "completions",
        "partitionKeyPath": "/sessionId",
        "maxThroughput": 1000
      },
      "productContainer": {
        "name": "product",
        "partitionKeyPath": "/categoryId",
        "maxThroughput": 1000
      },
      "customerContainer": {
        "name": "customer",
        "partitionKeyPath": "/customerId",
        "maxThroughput": 1000
      },
      "leasesContainer": {
        "name": "leases",
        "partitionKeyPath": "/id",
        "maxThroughput": 1000
      }
    },
    "vnetSettings": {
      "name": "[format('{0}-vnet', parameters('name'))]",
      "addressPrefix": "10.244.0.0/16",
      "subnets": {
        "aks-subnet": {
          "addressPrefix": "10.244.0.0/16"
        }
      }
    },
    "acrSettings": {
      "name": "[format('{0}cr', parameters('name'))]",
      "sku": "Basic",
      "tier": "Basic"
    },
    "aksSettings": {
      "name": "[format('{0}-aks', parameters('name'))]",
      "kubeletIdentityName": "[format('{0}-aks-agentpool', parameters('name'))]",
      "nodeRG": "[format('MC_{0}', parameters('name'))]",
      "sku": "Basic",
      "tier": "Free"
    },
    "laSettings": {
      "name": "[format('{0}-la', parameters('name'))]"
    },
    "aiSettings": {
      "name": "[format('{0}-ai', parameters('name'))]"
    },
    "keyVaultSettings": {
      "name": "[format('{0}-kv', parameters('name'))]"
    },
    "agentFactorySettings": {
      "miName": "[format('{0}-agent-factory-mi', parameters('name'))]"
    },
    "agentHubSettings": {
      "miName": "[format('{0}-agent-hub-mi', parameters('name'))]"
    },
    "chatUiSettings": {
      "miName": "[format('{0}-chat-ui-mi', parameters('name'))]"
    },
    "coreSettings": {
      "miName": "[format('{0}-core-mi', parameters('name'))]"
    },
    "dataSourceHubSettings": {
      "miName": "[format('{0}-data-source-hub-mi', parameters('name'))]"
    },
    "gatekeeperSettings": {
      "miName": "[format('{0}-gatekeeper-mi', parameters('name'))]"
    },
    "langChainSettings": {
      "miName": "[format('{0}-langchain-mi', parameters('name'))]"
    },
    "promptHubSettings": {
      "miName": "[format('{0}-prompt-hub-mi', parameters('name'))]"
    },
    "semanticKernelSettings": {
      "miName": "[format('{0}-semantic-kernel-mi', parameters('name'))]"
    },
    "roleIdMapping": {
      "Key Vault Administrator": "00482a5a-887f-4fb3-b363-3b7fe8e74483",
      "Key Vault Certificates Officer": "a4417e6f-fecd-4de8-b567-7b0420556985",
      "Key Vault Crypto Officer": "14b46e9e-c2b7-41b4-b07b-48a6ebf60603",
      "Key Vault Crypto Service Encryption User": "e147488a-f6f5-4113-8e2d-b22465e65bf6",
      "Key Vault Crypto User": "12338af0-0e69-4776-bea7-57ae8d297424",
      "Key Vault Reader": "21090545-7ca7-4776-b22c-e363652d74d2",
      "Key Vault Secrets Officer": "b86a8fe4-44ce-4948-aee5-eccb2c155cd7",
      "Key Vault Secrets User": "4633458b-17de-408a-b874-0445c86b69e6",
      "App Configuration Data Reader": "516239f1-63e1-4d78-a4de-a74fb236a071"
    }
  },
  "resources": [
    {
      "type": "Microsoft.AppConfiguration/configurationStores",
      "apiVersion": "2023-03-01",
      "name": "[variables('appConfigSettings').name]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "standard"
      },
      "properties": {
        "encryption": {},
        "disableLocalAuth": false,
        "softDeleteRetentionInDays": 7,
        "enablePurgeProtection": false
      }
    },
    {
      "copy": {
        "name": "configStoreKeyValue",
        "count": "[length(variables('appConfigSettings').configKeys)]"
      },
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2021-10-01-preview",
      "name": "[format('{0}/{1}', variables('appConfigSettings').name, variables('appConfigSettings').configKeys[copyIndex()].key)]",
      "properties": {
        "value": "[variables('appConfigSettings').configKeys[copyIndex()].value]",
        "contentType": "[variables('appConfigSettings').configKeys[copyIndex()].contentType]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.AppConfiguration/configurationStores', variables('appConfigSettings').name)]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2022-07-01",
      "name": "[variables('keyVaultSettings').name]",
      "location": "[parameters('location')]",
      "properties": {
        "createMode": "default",
        "enabledForDeployment": true,
        "enableRbacAuthorization": true,
        "enableSoftDelete": true,
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[tenant().tenantId]"
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2022-08-15",
      "name": "[variables('cosmosDbSettings').name]",
      "location": "[parameters('location')]",
      "kind": "GlobalDocumentDB",
      "properties": {
        "consistencyPolicy": {
          "defaultConsistencyLevel": "Session"
        },
        "databaseAccountOfferType": "Standard",
        "locations": [
          {
            "failoverPriority": 0,
            "isZoneRedundant": false,
            "locationName": "[parameters('location')]"
          }
        ]
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2022-08-15",
      "name": "[format('{0}/{1}', variables('cosmosDbSettings').name, variables('cosmosDbSettings').databaseName)]",
      "properties": {
        "resource": {
          "id": "[variables('cosmosDbSettings').databaseName]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDbSettings').name)]"
      ]
    },
    {
      "copy": {
        "name": "cosmosContainer",
        "count": "[length(items(variables('cosmosContainers')))]"
      },
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2022-08-15",
      "name": "[format('{0}/{1}/{2}', variables('cosmosDbSettings').name, variables('cosmosDbSettings').databaseName, items(variables('cosmosContainers'))[copyIndex()].value.name)]",
      "properties": {
        "resource": {
          "id": "[items(variables('cosmosContainers'))[copyIndex()].value.name]",
          "partitionKey": {
            "paths": [
              "[items(variables('cosmosContainers'))[copyIndex()].value.partitionKeyPath]"
            ],
            "kind": "Hash",
            "version": 2
          }
        },
        "options": {
          "autoscaleSettings": {
            "maxThroughput": "[items(variables('cosmosContainers'))[copyIndex()].value.maxThroughput]"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosDbSettings').name, variables('cosmosDbSettings').databaseName)]"
      ]
    },
    {
      "type": "Microsoft.Search/searchServices",
      "apiVersion": "2022-09-01",
      "name": "[variables('cognitiveSearchSettings').name]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[variables('cognitiveSearchSettings').sku]"
      },
      "properties": {
        "replicaCount": 1,
        "partitionCount": 1,
        "hostingMode": "default",
        "publicNetworkAccess": "Enabled",
        "networkRuleSet": {
          "ipRules": []
        },
        "encryptionWithCmk": {
          "enforcement": "Unspecified"
        },
        "disableLocalAuth": false,
        "authOptions": {
          "apiKeyOnly": {}
        }
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2022-09-01",
      "name": "[variables('vnetSettings').name]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vnetSettings').addressPrefix]"
          ]
        },
        "subnets": [
          {
            "name": "aks-subnet",
            "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetSettings').name, 'aks-subnet')]",
            "properties": {
              "addressPrefix": "[variables('vnetSettings').subnets['aks-subnet'].addressPrefix]",
              "delegations": [],
              "privateEndpointNetworkPolicies": "Disabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            },
            "type": "Microsoft.Network/virtualNetworks/subnets"
          }
        ],
        "virtualNetworkPeerings": [],
        "enableDdosProtection": false
      }
    },
    {
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2023-01-01-preview",
      "name": "[variables('acrSettings').name]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[variables('acrSettings').sku]",
        "tier": "[variables('acrSettings').tier]"
      },
      "properties": {
        "adminUserEnabled": true,
        "policies": {
          "quarantinePolicy": {
            "status": "disabled"
          },
          "trustPolicy": {
            "type": "Notary",
            "status": "disabled"
          },
          "retentionPolicy": {
            "days": 7,
            "status": "disabled"
          },
          "exportPolicy": {
            "status": "enabled"
          },
          "azureADAuthenticationAsArmPolicy": {
            "status": "enabled"
          },
          "softDeletePolicy": {
            "retentionDays": 7,
            "status": "disabled"
          }
        },
        "encryption": {
          "status": "disabled"
        },
        "dataEndpointEnabled": false,
        "publicNetworkAccess": "Enabled",
        "networkRuleBypassOptions": "AzureServices",
        "zoneRedundancy": "Disabled",
        "anonymousPullEnabled": false
      }
    },
    {
      "type": "Microsoft.ContainerRegistry/registries/scopeMaps",
      "apiVersion": "2023-01-01-preview",
      "name": "[concat(variables('acrSettings').name, '/_repositories_admin')]",
      "dependsOn": [
        "[resourceId('Microsoft.ContainerRegistry/registries', variables('acrSettings').name)]"
      ],
      "properties": {
        "description": "Can perform all read, write and delete operations on the registry",
        "actions": [
          "repositories/*/metadata/read",
          "repositories/*/metadata/write",
          "repositories/*/content/read",
          "repositories/*/content/write",
          "repositories/*/content/delete"
        ]
      }
    },
    {
      "type": "Microsoft.ContainerRegistry/registries/scopeMaps",
      "apiVersion": "2023-01-01-preview",
      "name": "[concat(variables('acrSettings').name, '/_repositories_pull')]",
      "dependsOn": [
        "[resourceId('Microsoft.ContainerRegistry/registries', variables('acrSettings').name)]"
      ],
      "properties": {
        "description": "Can pull any repository of the registry",
        "actions": [
          "repositories/*/content/read"
        ]
      }
    },
    {
      "type": "Microsoft.ContainerRegistry/registries/scopeMaps",
      "apiVersion": "2023-01-01-preview",
      "name": "[concat(variables('acrSettings').name, '/_repositories_push')]",
      "dependsOn": [
        "[resourceId('Microsoft.ContainerRegistry/registries', variables('acrSettings').name)]"
      ],
      "properties": {
        "description": "Can push to any repository of the registry",
        "actions": [
          "repositories/*/content/read",
          "repositories/*/content/write"
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2021-12-01-preview",
      "name": "[variables('laSettings').name]",
      "location": "eastus",
      "properties": {
        "sku": {
          "name": "Standalone"
        },
        "retentionInDays": 31,
        "features": {
          "enableLogAccessUsingOnlyResourcePermissions": true
        },
        "workspaceCapping": {
          "dailyQuotaGb": -1
        },
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled"
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('aiSettings').name]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "Flow_Type": "Bluefield",
        "Request_Source": "rest",
        "RetentionInDays": 30,
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('laSettings').name)]",
        "IngestionMode": "LogAnalytics",
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled"
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('laSettings').name)]"
      ]
    },
    {
      "type": "Microsoft.ContainerService/managedClusters",
      "apiVersion": "2023-01-02-preview",
      "name": "[variables('aksSettings').name]",
      "location": "eastus",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetSettings').name, 'aks-subnet')]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('laSettings').name)]"
      ],
      "sku": {
        "name": "Basic",
        "tier": "Free"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "kubernetesVersion": "[parameters('k8sVersion')]",
        "dnsPrefix": "[concat(variables('aksSettings').name, '-dns')]",
        "agentPoolProfiles": [
          {
            "name": "agentpool",
            "count": 1,
            "vmSize": "Standard_B4ms",
            "osDiskSizeGB": 128,
            "osDiskType": "Managed",
            "kubeletDiskType": "OS",
            "vnetSubnetID": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetSettings').name, 'aks-subnet')]",
            "maxPods": 110,
            "type": "VirtualMachineScaleSets",
            "availabilityZones": [
              "1",
              "2",
              "3"
            ],
            "maxCount": 2,
            "minCount": 1,
            "enableAutoScaling": true,
            "powerState": {
              "code": "Running"
            },
            "orchestratorVersion": "[parameters('k8sVersion')]",
            "enableNodePublicIP": false,
            "enableCustomCATrust": false,
            "mode": "System",
            "osType": "Linux",
            "osSKU": "Ubuntu",
            "enableFIPS": false
          }
        ],
        "servicePrincipalProfile": {
          "clientId": "msi"
        },
        "addonProfiles": {
          "azureKeyvaultSecretsProvider": {
            "enabled": true,
            "config": {
              "enableSecretRotation": "true",
              "rotationPollInterval": "2m"
            }
          },
          "azurepolicy": {
            "enabled": false
          },
          "httpApplicationRouting": {
            "enabled": true
          },
          "omsagent": {
            "enabled": true,
            "config": {
              "logAnalyticsWorkspaceResourceID": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('laSettings').name)]",
              "useAADAuth": "true"
            }
          }
        },
        "nodeResourceGroup": "[variables('aksSettings').nodeRG]",
        "enableRBAC": true,
        "networkProfile": {
          "networkPlugin": "azure",
          "networkPolicy": "azure",
          "loadBalancerSku": "Standard",
          "loadBalancerProfile": {
            "managedOutboundIPs": {
              "count": 1
            },
            "backendPoolType": "nodeIPConfiguration"
          },
          "serviceCidr": "10.0.0.0/16",
          "dnsServiceIP": "10.0.0.10",
          "dockerBridgeCidr": "172.17.0.1/16",
          "outboundType": "loadBalancer",
          "serviceCidrs": [
            "10.0.0.0/16"
          ],
          "ipFamilies": [
            "IPv4"
          ]
        },
        "autoScalerProfile": {
          "balance-similar-node-groups": "false",
          "expander": "random",
          "max-empty-bulk-delete": "10",
          "max-graceful-termination-sec": "600",
          "max-node-provision-time": "15m",
          "max-total-unready-percentage": "45",
          "new-pod-scale-up-delay": "0s",
          "ok-total-unready-count": "3",
          "scale-down-delay-after-add": "10m",
          "scale-down-delay-after-delete": "10s",
          "scale-down-delay-after-failure": "3m",
          "scale-down-unneeded-time": "10m",
          "scale-down-unready-time": "20m",
          "scale-down-utilization-threshold": "0.5",
          "scan-interval": "10s",
          "skip-nodes-with-local-storage": "false",
          "skip-nodes-with-system-pods": "true"
        },
        "autoUpgradeProfile": {
          "upgradeChannel": "patch"
        },
        "disableLocalAccounts": false,
        "securityProfile": {
          "workloadIdentity": {
            "enabled": true
          }
        },
        "storageProfile": {
          "diskCSIDriver": {
            "enabled": true,
            "version": "v1"
          },
          "fileCSIDriver": {
            "enabled": true
          },
          "snapshotController": {
            "enabled": true
          }
        },
        "oidcIssuerProfile": {
          "enabled": true
        },
        "ingressProfile": {
          "webAppRouting": {
            "enabled": true
          }
        },
        "workloadAutoScalerProfile": {},
        "azureMonitorProfile": {
          "metrics": {
            "enabled": true,
            "kubeStateMetrics": {}
          }
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-09-01",
      "name": "[format('{0}promptsa', parameters('name'))]",
      "location": "[parameters('location')]",
      "kind": "Storage",
      "sku": {
        "name": "Standard_LRS"
      }
    },    
    {
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "apiVersion": "2022-09-01",
      "name": "[concat(variables('vnetSettings').name, '/aks-subnet')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetSettings').name)]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('vnetSettings').name, '-aks-subnet-nsg'))]"
      ],
      "properties": {
        "addressPrefix": "[variables('vnetSettings').subnets['aks-subnet'].addressPrefix]",
        "delegations": [],
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('vnetSettings').name, '-aks-subnet-nsg'))]",
          "name": "[concat(variables('vnetSettings').name, '-aks-subnet-nsg')]",
          "properties": { 
            "flushConnection": false,
            "securityRules": [
              {
                "name": "AllowHTTPInbound",
                "properties": {
                  "access": "Allow",
                  "destinationAddressPrefix": "*",
                  "destinationPortRange": "80",
                  "direction": "Inbound",
                  "priority": 500,
                  "protocol": "Tcp",
                  "sourceAddressPrefix": "Internet",
                  "sourcePortRange": "*"
                },
                "type": "Microsoft.Network/networkSecurityGroups/securityRules"
              },
              {
                "name": "AllowHTTPSInbound",
                "properties": {
                  "access": "Allow",
                  "destinationAddressPrefix": "*",
                  "destinationPortRange": "443",
                  "direction": "Inbound",
                  "priority": 501,
                  "protocol": "Tcp",
                  "sourceAddressPrefix": "Internet",
                  "sourcePortRange": "*"
                },
                "type": "Microsoft.Network/networkSecurityGroups/securityRules"
              }
            ]
          }
        }
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2023-04-01",
      "name": "[concat(variables('vnetSettings').name, '-aks-subnet-nsg')]",
      "location": "[parameters('location')]",
        "properties": {
          "flushConnection": false,
          "securityRules": [
            {
              "name": "AllowHTTPInbound",
              "properties": {
                "access": "Allow",
                "destinationAddressPrefix": "*",
                "destinationPortRange": "80",
                "direction": "Inbound",
                "priority": 500,
                "protocol": "Tcp",
                "sourceAddressPrefix": "Internet",
                "sourcePortRange": "*"
              },
              "type": "Microsoft.Network/networkSecurityGroups/securityRules"
            },
            {
              "name": "AllowHTTPSInbound",
              "properties": {
                "access": "Allow",
                "destinationAddressPrefix": "*",
                "destinationPortRange": "443",
                "direction": "Inbound",
                "priority": 501,
                "protocol": "Tcp",
                "sourceAddressPrefix": "Internet",
                "sourcePortRange": "*"
              },
              "type": "Microsoft.Network/networkSecurityGroups/securityRules"
            }
          ]
        }
    },
    {
      "type": "Microsoft.ContainerService/managedClusters/agentPools",
      "apiVersion": "2023-01-02-preview",
      "name": "[concat(variables('aksSettings').name, '/agentpool')]",
      "dependsOn": [
        "[resourceId('Microsoft.ContainerService/managedClusters', variables('aksSettings').name)]",
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetSettings').name, 'aks-subnet')]"
      ],
      "properties": {
        "count": 1,
        "vmSize": "Standard_B4ms",
        "osDiskSizeGB": 128,
        "osDiskType": "Managed",
        "kubeletDiskType": "OS",
        "maxPods": 110,
        "type": "VirtualMachineScaleSets",
        "availabilityZones": [
          "1",
          "2",
          "3"
        ],
        "maxCount": 2,
        "minCount": 1,
        "enableAutoScaling": true,
        "powerState": {
          "code": "Running"
        },
        "orchestratorVersion": "[parameters('k8sVersion')]",
        "enableNodePublicIP": false,
        "enableCustomCATrust": false,
        "mode": "System",
        "osType": "Linux",
        "osSKU": "Ubuntu",
        "enableFIPS": false
      }
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "name": "[variables('agentFactorySettings').miName]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials",
      "apiVersion": "2023-01-31",
      "name": "[format('{0}/{1}', variables('agentFactorySettings').miName, 'agentFactoryId')]",
      "properties": {
        "audiences": [
          "api://AzureADTokenExchange"
        ],
        "issuer": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('aksSettings').name), providers('Microsoft.ContainerService','managedClusters').apiVersions[0]).oidcIssuerProfile.issuerURL]",
        "subject": "system:serviceaccount:default:agent-factory-api"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerService/managedClusters', variables('aksSettings').name)]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('agentFactorySettings').miName)]"
      ]
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "name": "[variables('agentHubSettings').miName]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials",
      "apiVersion": "2023-01-31",
      "name": "[format('{0}/{1}', variables('agentHubSettings').miName, 'agentHubId')]",
      "properties": {
        "audiences": [
          "api://AzureADTokenExchange"
        ],
        "issuer": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('aksSettings').name), providers('Microsoft.ContainerService','managedClusters').apiVersions[0]).oidcIssuerProfile.issuerURL]",
        "subject": "system:serviceaccount:default:agent-hub-api"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerService/managedClusters', variables('aksSettings').name)]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('agentHubSettings').miName)]"
      ]
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "name": "[variables('chatUiSettings').miName]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials",
      "apiVersion": "2023-01-31",
      "name": "[format('{0}/{1}', variables('chatUiSettings').miName, 'chatUiId')]",
      "properties": {
        "audiences": [
          "api://AzureADTokenExchange"
        ],
        "issuer": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('aksSettings').name), providers('Microsoft.ContainerService','managedClusters').apiVersions[0]).oidcIssuerProfile.issuerURL]",
        "subject": "system:serviceaccount:default:chat-ui"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerService/managedClusters', variables('aksSettings').name)]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('chatUiSettings').miName)]"
      ]
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "name": "[variables('coreSettings').miName]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials",
      "apiVersion": "2023-01-31",
      "name": "[format('{0}/{1}', variables('coreSettings').miName, 'coreId')]",
      "properties": {
        "audiences": [
          "api://AzureADTokenExchange"
        ],
        "issuer": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('aksSettings').name), providers('Microsoft.ContainerService','managedClusters').apiVersions[0]).oidcIssuerProfile.issuerURL]",
        "subject": "system:serviceaccount:default:core-api"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerService/managedClusters', variables('aksSettings').name)]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('coreSettings').miName)]"
      ]
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "name": "[variables('dataSourceHubSettings').miName]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials",
      "apiVersion": "2023-01-31",
      "name": "[format('{0}/{1}', variables('dataSourceHubSettings').miName, 'dataSourceHubId')]",
      "properties": {
        "audiences": [
          "api://AzureADTokenExchange"
        ],
        "issuer": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('aksSettings').name), providers('Microsoft.ContainerService','managedClusters').apiVersions[0]).oidcIssuerProfile.issuerURL]",
        "subject": "system:serviceaccount:default:data-source-hub-api"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerService/managedClusters', variables('aksSettings').name)]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('dataSourceHubSettings').miName)]"
      ]
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "name": "[variables('gatekeeperSettings').miName]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials",
      "apiVersion": "2023-01-31",
      "name": "[format('{0}/{1}', variables('gatekeeperSettings').miName, 'gatekeeperId')]",
      "properties": {
        "audiences": [
          "api://AzureADTokenExchange"
        ],
        "issuer": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('aksSettings').name), providers('Microsoft.ContainerService','managedClusters').apiVersions[0]).oidcIssuerProfile.issuerURL]",
        "subject": "system:serviceaccount:default:gatekeeper-api"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerService/managedClusters', variables('aksSettings').name)]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('gatekeeperSettings').miName)]"
      ]
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "name": "[variables('langChainSettings').miName]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials",
      "apiVersion": "2023-01-31",
      "name": "[format('{0}/{1}', variables('langChainSettings').miName, 'langChainId')]",
      "properties": {
        "audiences": [
          "api://AzureADTokenExchange"
        ],
        "issuer": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('aksSettings').name), providers('Microsoft.ContainerService','managedClusters').apiVersions[0]).oidcIssuerProfile.issuerURL]",
        "subject": "system:serviceaccount:default:langchain-api"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerService/managedClusters', variables('aksSettings').name)]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('langChainSettings').miName)]"
      ]
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "name": "[variables('promptHubSettings').miName]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials",
      "apiVersion": "2023-01-31",
      "name": "[format('{0}/{1}', variables('promptHubSettings').miName, 'promptHubId')]",
      "properties": {
        "audiences": [
          "api://AzureADTokenExchange"
        ],
        "issuer": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('aksSettings').name), providers('Microsoft.ContainerService','managedClusters').apiVersions[0]).oidcIssuerProfile.issuerURL]",
        "subject": "system:serviceaccount:default:prompt-hub-api"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerService/managedClusters', variables('aksSettings').name)]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('promptHubSettings').miName)]"
      ]
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "name": "[variables('semanticKernelSettings').miName]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials",
      "apiVersion": "2023-01-31",
      "name": "[format('{0}/{1}', variables('semanticKernelSettings').miName, 'semanticKernelId')]",
      "properties": {
        "audiences": [
          "api://AzureADTokenExchange"
        ],
        "issuer": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('aksSettings').name), providers('Microsoft.ContainerService','managedClusters').apiVersions[0]).oidcIssuerProfile.issuerURL]",
        "subject": "system:serviceaccount:default:semantic-kernel-api"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerService/managedClusters', variables('aksSettings').name)]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('semanticKernelSettings').miName)]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.AppConfiguration/configurationStores/{0}', variables('appConfigSettings').name)]",
      "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}agentfactorymi', parameters('name'))), variables('keyVaultSettings').name)]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleIdMapping')['App Configuration Data Reader'])]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('agentFactorySettings').miName), providers('Microsoft.ManagedIdentity', 'userAssignedIdentities').apiVersions[0]).principalId]",
        "principalType": "ServicePrincipal"
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.AppConfiguration/configurationStores/{0}', variables('appConfigSettings').name)]",
      "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}agenthubmi', parameters('name'))), variables('keyVaultSettings').name)]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleIdMapping')['App Configuration Data Reader'])]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('agentHubSettings').miName), providers('Microsoft.ManagedIdentity', 'userAssignedIdentities').apiVersions[0]).principalId]",
        "principalType": "ServicePrincipal"
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.AppConfiguration/configurationStores/{0}', variables('appConfigSettings').name)]",
      "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}chatuimi', parameters('name'))), variables('keyVaultSettings').name)]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleIdMapping')['App Configuration Data Reader'])]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('chatUiSettings').miName), providers('Microsoft.ManagedIdentity', 'userAssignedIdentities').apiVersions[0]).principalId]",
        "principalType": "ServicePrincipal"
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.AppConfiguration/configurationStores/{0}', variables('appConfigSettings').name)]",
      "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}coremi', parameters('name'))), variables('keyVaultSettings').name)]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleIdMapping')['App Configuration Data Reader'])]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('coreSettings').miName), providers('Microsoft.ManagedIdentity', 'userAssignedIdentities').apiVersions[0]).principalId]",
        "principalType": "ServicePrincipal"
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.AppConfiguration/configurationStores/{0}', variables('appConfigSettings').name)]",
      "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}datasourcehubmi', parameters('name'))), variables('keyVaultSettings').name)]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleIdMapping')['App Configuration Data Reader'])]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('dataSourceHubSettings').miName), providers('Microsoft.ManagedIdentity', 'userAssignedIdentities').apiVersions[0]).principalId]",
        "principalType": "ServicePrincipal"
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.AppConfiguration/configurationStores/{0}', variables('appConfigSettings').name)]",
      "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}gatekeepermi', parameters('name'))), variables('keyVaultSettings').name)]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleIdMapping')['App Configuration Data Reader'])]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('gatekeeperSettings').miName), providers('Microsoft.ManagedIdentity', 'userAssignedIdentities').apiVersions[0]).principalId]",
        "principalType": "ServicePrincipal"
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.AppConfiguration/configurationStores/{0}', variables('appConfigSettings').name)]",
      "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}langchainmi', parameters('name'))), variables('keyVaultSettings').name)]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleIdMapping')['App Configuration Data Reader'])]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('langChainSettings').miName), providers('Microsoft.ManagedIdentity', 'userAssignedIdentities').apiVersions[0]).principalId]",
        "principalType": "ServicePrincipal"
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.AppConfiguration/configurationStores/{0}', variables('appConfigSettings').name)]",
      "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}prompthubmi', parameters('name'))), variables('keyVaultSettings').name)]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleIdMapping')['App Configuration Data Reader'])]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('promptHubSettings').miName), providers('Microsoft.ManagedIdentity', 'userAssignedIdentities').apiVersions[0]).principalId]",
        "principalType": "ServicePrincipal"
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.AppConfiguration/configurationStores/{0}', variables('appConfigSettings').name)]",
      "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}semantickernelmi', parameters('name'))), variables('keyVaultSettings').name)]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleIdMapping')['App Configuration Data Reader'])]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('semanticKernelSettings').miName), providers('Microsoft.ManagedIdentity', 'userAssignedIdentities').apiVersions[0]).principalId]",
        "principalType": "ServicePrincipal"
      }
    }
  ],
  "outputs": {
    "deployedUrl": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('aksSettings').name), '2023-01-02-preview').addonProfiles.httpApplicationRouting.config.HTTPApplicationRoutingZoneName]"
    },
    "resourcePrefix": {
      "type": "string",
      "value": "[parameters('name')]"
    },
    "cosmosDbAccountName": {
      "type": "string",
      "value": "[variables('cosmosDbSettings').name]"
    }
  }
}